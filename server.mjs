import express from 'express';
import bodyParser from 'body-parser';
import fetch from 'node-fetch';
import cors from 'cors';
import dotenv from 'dotenv';

dotenv.config(); // Load environment variables

const app = express(); // Create the Express app

// Middleware
app.use(express.json());
app.use(bodyParser.json());
app.use(cors()); // Enable CORS for all routes

// Ensure API key exists
if (!process.env.OPENAI_API_KEY) {
    console.error("ERROR: OPENAI_API_KEY is not set in the .env file.");
    process.exit(1); // Exit if the key is missing
}

// Route to handle OpenAI API requests
app.post('/api/generate', async (req, res) => {
    const { prompt } = req.body;

    if (!prompt) {
        return res.status(400).json({ error: "Prompt is required" });
    }

    console.log("Received request with prompt:", prompt); // Log incoming prompt for debugging

    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: "gpt-3.5-turbo",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 300,
                temperature: 0.7
            })
        });

        if (!response.ok) {
            const errorDetails = await response.json();
            console.error("OpenAI API Error:", errorDetails);
            return res.status(response.status).json({ error: errorDetails.error || response.statusText });
        }

        const data = await response.json();
        const generatedText = data.choices[0]?.message.content.trim();

        if (!generatedText) {
            console.error("No text generated by OpenAI API.");
            return res.status(500).json({ error: "No response generated from OpenAI API." });
        }

        console.log("Generated response:", generatedText); // Log the generated response
        res.json({ text: generatedText }); // Send only the generated text
    } catch (error) {
        console.error("Server Error:", error);
        res.status(500).json({ error: 'Something went wrong. Please try again later.' });
    }
});

// Start the server
const PORT = process.env.PORT || 0; // Use an environment variable or let the system assign a port
const server = app.listen(PORT, () => {
    const address = server.address();
    console.log(`Server running on http://localhost:${address.port}`);
});
